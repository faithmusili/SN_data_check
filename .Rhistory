today %in% input$filter_date,
District_Name%in% input$filter_district)%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
select(1:nrow(p%>%data.frame()),match("N (all interviews - including invalid)",names(.)),nrow(.),everything())
data%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long))
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
filter(Member_id%in%input$filter_partner,
ONA_username %in% input$filter_username,
today %in% input$filter_date,
District_Name%in% input$filter_district)%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
select(1:nrow(p%>%data.frame()),match("N (all interviews - including invalid)",names(.)),nrow(.),everything())
source("ona_package.R") ## this is a coy paste of the onaR package source file
library(tidyverse)
library(splitstackshape)
library(shinydashboard)
library(DT)
library(shinyWidgets)
library(future)
## targets using the bens listing file
target <- readxl::read_excel("R5 bens lookup file_updated.xlsx")%>%
group_by(Member_id, District_Name,Community_Name)%>%
summarise(Target = n())
## variables to be used -- just for intitialising the dashboard
varshown <- c("today", "ONA_username","e.Interview_criteria","Which.is.the.agency.supporting.the.beneficiary.","District_Name","Community_Name","start", "end","_duration")
# Initialize a empty dataframe
listData <- function(){
d <- data.frame(matrix(ncol=length(varshown), nrow = 0))
colnames(d)<-varshown
names(d)[match("Which.is.the.agency.supporting.the.beneficiary.",names(d))] <- "Member_id"
return(d)
}
## function to format the data
prepare_data <- function(data){
data$today <- as.character(as.Date(data$end, tz = "GMT"))
data$end <- as.POSIXct(data$end)
data$start <- as.POSIXct(data$start)
data$interviewDuration <-round(as.numeric(data$X_duration)/60)
data$long <- data$interviewDuration>120
data$short <- between(data$interviewDuration, 0, 12)
names(data)[match("a.Member_id",names(data))] <- "Member_id"
names(data)[match("e.Interview_criteria",names(data))] <- "Interview_criteria"
names(data)[match("d.consensus",names(data))] <- "consent"
names(data) <- str_remove_all(names(data),"g.HH_confirmation.")
names(data) <- str_remove_all(names(data),"q.q2.COVID.19.")
data <- data[-1,]
data <- data%>%
mutate(Interview_criteria = ifelse(is.na(Interview_criteria) |
Interview_criteria ==  "If most information is matching and respondent confirms that you are speaking with the selected household, please proceed with the survey","1","0"))
return(data)
}
# Retrieve data from ona
get_data <- function(login, password ){
sn_r5 <- tryCatch(onaDownload("Condensed_PDM_2020_Survey_R5_L",
"BRCiS",login,password, keepGroupNames=FALSE),
error=function(e){message("can't access data")})
return(prepare_data(sn_r5))
}
sn<-get_data("fmusili","F30041965m")%>%data.frame()
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
filter(Member_id%in%input$filter_partner,
ONA_username %in% input$filter_username,
today %in% input$filter_date,
District_Name%in% input$filter_district)%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
select(1:nrow(p%>%data.frame()),match("N (all interviews - including invalid)",names(.)),nrow(.),everything())
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")
sn%>%
filter(Interview_criteria != "0"
)
source("ona_package.R") ## this is a coy paste of the onaR package source file
library(tidyverse)
library(splitstackshape)
library(shinydashboard)
library(DT)
library(shinyWidgets)
library(future)
## targets using the bens listing file
target <- readxl::read_excel("R5 bens lookup file_updated.xlsx")%>%
group_by(Member_id, District_Name,Community_Name)%>%
summarise(Target = n())
## variables to be used -- just for intitialising the dashboard
varshown <- c("today", "ONA_username","e.Interview_criteria","Which.is.the.agency.supporting.the.beneficiary.","District_Name","Community_Name","start", "end","_duration")
# Initialize a empty dataframe
listData <- function(){
d <- data.frame(matrix(ncol=length(varshown), nrow = 0))
colnames(d)<-varshown
names(d)[match("Which.is.the.agency.supporting.the.beneficiary.",names(d))] <- "Member_id"
return(d)
}
## function to format the data
prepare_data <- function(data){
data$today <- as.character(as.Date(data$end, tz = "GMT"))
data$end <- as.POSIXct(data$end)
data$start <- as.POSIXct(data$start)
data$interviewDuration <-round(as.numeric(data$X_duration)/60)
data$long <- data$interviewDuration>120
data$short <- between(data$interviewDuration, 0, 12)
names(data)[match("a.Member_id",names(data))] <- "Member_id"
names(data)[match("e.Interview_criteria",names(data))] <- "Interview_criteria"
names(data)[match("d.consensus",names(data))] <- "consent"
names(data)[match("consensus",names(data))] <- "consent"
names(data) <- str_remove_all(names(data),"g.HH_confirmation.")
names(data) <- str_remove_all(names(data),"q.q2.COVID.19.")
data <- data[-1,]
data <- data%>%
mutate(Interview_criteria = ifelse(is.na(Interview_criteria) |
Interview_criteria ==  "If most information is matching and respondent confirms that you are speaking with the selected household, please proceed with the survey","1","0"))
return(data)
}
# Retrieve data from ona
get_data <- function(login, password ){
sn_r5 <- tryCatch(onaDownload("Condensed_PDM_2020_Survey_R5_L",
"BRCiS",login,password, keepGroupNames=FALSE),
error=function(e){message("can't access data")})
return(prepare_data(sn_r5))
}
sn<-get_data("fmusili","F30041965m")%>%data.frame()
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
filter(Member_id%in%input$filter_partner,
ONA_username %in% input$filter_username,
today %in% input$filter_date,
District_Name%in% input$filter_district)%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
select(1:nrow(p%>%data.frame()),match("N (all interviews - including invalid)",names(.)),nrow(.),everything())
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
select(1:nrow(p%>%data.frame()),match("N (all interviews - including invalid)",names(.)),nrow(.),everything())
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%View()
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
select(1:nrow(p%>%data.frame()),match("N (all interviews - including invalid)",names(.)),nrow(.),everything())
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
mutate(n = nrow(.))
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
mutate(n = nrow(.))%>%View()
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
mutate(n = length(.))%>%View
left_join(
sn%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`N (all interviews - including invalid)`=sum(!is.na(today), na.rm=T),
`Average duration (mean)` = round(mean(interviewDuration, na.rm=TRUE),1),
`Average duration (median)` = round(median(interviewDuration, na.rm=TRUE),1),
`Short surveys` = sum(short),
`Long surveys` = sum(long)),
sn%>%
filter(Interview_criteria != "0" &
consent != "No" &
short !="TRUE")%>%
group_by(today,Member_id , Community_Name,District_Name,ONA_username)%>%
dplyr::summarise(`Valid interviews`=sum(!is.na(today), na.rm=T)))%>%
select(1:nrow(p%>%data.frame()),match("N (all interviews - including invalid)",names(.)),length(.),everything())%>%View
runApp()
source("ona_package.R") ## this is a coy paste of the onaR package source file
library(tidyverse)
library(splitstackshape)
library(shinydashboard)
library(DT)
library(shinyWidgets)
library(future)
## targets using the bens listing file
target <- readxl::read_excel("R5 bens lookup file_updated.xlsx")%>%
group_by(Member_id, District_Name,Community_Name)%>%
summarise(Target = n())
## variables to be used -- just for intitialising the dashboard
varshown <- c("today", "ONA_username","e.Interview_criteria","Which.is.the.agency.supporting.the.beneficiary.","District_Name","Community_Name","start", "end","_duration")
# Initialize a empty dataframe
listData <- function(){
d <- data.frame(matrix(ncol=length(varshown), nrow = 0))
colnames(d)<-varshown
names(d)[match("Which.is.the.agency.supporting.the.beneficiary.",names(d))] <- "Member_id"
return(d)
}
## function to format the data
prepare_data <- function(data){
data$today <- as.character(as.Date(data$end, tz = "GMT"))
data$end <- as.POSIXct(data$end)
data$start <- as.POSIXct(data$start)
data$interviewDuration <-round(as.numeric(data$X_duration)/60)
data$long <- data$interviewDuration>120
data$short <- between(data$interviewDuration, 0, 12)
names(data)[match("a.Member_id",names(data))] <- "Member_id"
names(data)[match("e.Interview_criteria",names(data))] <- "Interview_criteria"
names(data)[match("d.consensus",names(data))] <- "consent"
names(data)[match("consensus",names(data))] <- "consent"
names(data) <- str_remove_all(names(data),"g.HH_confirmation.")
names(data) <- str_remove_all(names(data),"q.q2.COVID.19.")
data <- data[-1,]
data <- data%>%
mutate(Interview_criteria = ifelse(is.na(Interview_criteria) |
Interview_criteria ==  "If most information is matching and respondent confirms that you are speaking with the selected household, please proceed with the survey","1","0"))
return(data)
}
# Retrieve data from ona
get_data <- function(login, password ){
sn_r5 <- tryCatch(onaDownload("Condensed_PDM_2020_Survey_R5_L",
"BRCiS",login,password, keepGroupNames=FALSE),
error=function(e){message("can't access data")})
return(prepare_data(sn_r5))
}
sn<-get_data("fmusili","F30041965m")%>%data.frame()
runApp()
source("ona_package.R") ## this is a coy paste of the onaR package source file
library(tidyverse)
library(splitstackshape)
library(shinydashboard)
library(DT)
library(shinyWidgets)
library(future)
## targets using the bens listing file
target <- readxl::read_excel("R5 bens lookup file_updated.xlsx")%>%
group_by(Member_id, District_Name,Community_Name)%>%
summarise(Target = n())
## variables to be used -- just for intitialising the dashboard
varshown <- c("today", "ONA_username","e.Interview_criteria","Which.is.the.agency.supporting.the.beneficiary.","District_Name","Community_Name","start", "end","_duration")
# Initialize a empty dataframe
listData <- function(){
d <- data.frame(matrix(ncol=length(varshown), nrow = 0))
colnames(d)<-varshown
names(d)[match("Which.is.the.agency.supporting.the.beneficiary.",names(d))] <- "Member_id"
return(d)
}
## function to format the data
prepare_data <- function(data){
data$today <- as.character(as.Date(data$end, tz = "GMT"))
data$end <- as.POSIXct(data$end)
data$start <- as.POSIXct(data$start)
data$interviewDuration <-round(as.numeric(data$X_duration)/60)
data$long <- data$interviewDuration>120
data$short <- between(data$interviewDuration, 0, 12)
names(data)[match("a.Member_id",names(data))] <- "Member_id"
names(data)[match("e.Interview_criteria",names(data))] <- "Interview_criteria"
names(data)[match("d.consensus",names(data))] <- "consent"
names(data)[match("consensus",names(data))] <- "consent"
names(data) <- str_remove_all(names(data),"g.HH_confirmation.")
names(data) <- str_remove_all(names(data),"q.q2.COVID.19.")
data <- data[-1,]
data <- data%>%
mutate(Interview_criteria = ifelse(is.na(Interview_criteria) |
Interview_criteria ==  "If most information is matching and respondent confirms that you are speaking with the selected household, please proceed with the survey","1","0"))
return(data)
}
# Retrieve data from ona
get_data <- function(login, password ){
sn_r5 <- tryCatch(onaDownload("Condensed_PDM_2020_Survey_R5_L",
"BRCiS",login,password, keepGroupNames=FALSE),
error=function(e){message("can't access data")})
return(prepare_data(sn_r5))
}
sn<-get_data("fmusili","F30041965m")%>%data.frame()
runApp()
as.POSIXct(sn$start)
sn$end <- as.POSIXct(sn$end)
sn$start <- as.POSIXct(sn$start)
sn$interviewDuration <- difftime(sn$end, sn$start, units='mins')
View(sn)
sn$end <- as.POSIXct(sn$end)
sn$start <- as.POSIXct(sn$start)
sn$interviewDuration_tt <- difftime(sn$end, sn$start, units='mins')
runApp()
sn$end <- as.POSIXct(sn$end)
sn$start <- as.POSIXct(sn$start)
sn$X_submission_time <- as.POSIXct(sn$X_submission_time)
sn$X_date_modified <- as.POSIXct(sn$X_date_modified)
sn$interviewDuration_tt <- difftime(sn$end, sn$start, units='mins')
sn$interviewDuration_s <- difftime(sn$X_submission_time, sn$start, units='mins')
sn$interviewDuration_m <- difftime(sn$X_date_modified, sn$start, units='mins')
shiny::runApp()
source("ona_package.R") ## this is a coy paste of the onaR package source file
library(tidyverse)
library(splitstackshape)
library(shinydashboard)
library(DT)
library(shinyWidgets)
library(future)
## targets using the bens listing file
target <- readxl::read_excel("R5 bens lookup file_updated.xlsx")%>%
group_by(Member_id, District_Name,Community_Name)%>%
summarise(Target = n())
## variables to be used -- just for intitialising the dashboard
varshown <- c("today", "ONA_username","e.Interview_criteria","Which.is.the.agency.supporting.the.beneficiary.","District_Name","Community_Name","start", "end","_duration")
# Initialize a empty dataframe
listData <- function(){
d <- data.frame(matrix(ncol=length(varshown), nrow = 0))
colnames(d)<-varshown
names(d)[match("Which.is.the.agency.supporting.the.beneficiary.",names(d))] <- "Member_id"
return(d)
}
## function to format the data
prepare_data <- function(data){
data$today <- as.character(as.Date(data$end, tz = "GMT"))
data$end <- as.POSIXct(data$end)
data$start <- as.POSIXct(data$start)
data$interviewDuration <- difftime(data$end, data$start, units='mins')
data$long <- data$interviewDuration>120
data$short <- between(data$interviewDuration, 0, 12)
names(data)[match("a.Member_id",names(data))] <- "Member_id"
names(data)[match("e.Interview_criteria",names(data))] <- "Interview_criteria"
names(data)[match("d.consensus",names(data))] <- "consent"
names(data)[match("consensus",names(data))] <- "consent"
names(data) <- str_remove_all(names(data),"g.HH_confirmation.")
names(data) <- str_remove_all(names(data),"q.q2.COVID.19.")
data <- data[-1,]
data <- data%>%
mutate(Interview_criteria = ifelse(is.na(Interview_criteria) |
Interview_criteria ==  "If most information is matching and respondent confirms that you are speaking with the selected household, please proceed with the survey","1","0"))
return(data)
}
# Retrieve data from ona
get_data <- function(login, password ){
sn_r5 <- tryCatch(onaDownload("Condensed_PDM_2020_Survey_R5_L",
"BRCiS",login,password, keepGroupNames=FALSE),
error=function(e){message("can't access data")})
return(prepare_data(sn_r5))
}
sn <- get_data("fmusili","F30041965m")
library(summarytools)
descr(sn$interviewDuration)
descr(as.numeric(sn$interviewDuration))
ggplot(data = sn) +
geom_histogram(aes(x = interviewDuration))+
theme_light()+
labs(x = "Minutes")
ggplot(data = sn) +
geom_histogram(aes(x = interviewDuration))+
theme_light()+
labs(x = "Minutes")_
ggplot(data = sn) +
geom_histogram(aes(x = interviewDuration))+
theme_light()+
labs(x = "Minutes")+
scale_x_continuous(limits = c(0,100))
ggplot(data = sn) +
geom_histogram(aes(x = interviewDuration))+
theme_light()+
labs(x = "Minutes")+
scale_x_continuous(limits = c(0,100), breaks = scales::pretty_breaks(10))
ggplot(data = sn) +
geom_histogram(aes(x = interviewDuration))+
theme_light()+
labs(x = "Minutes")+
scale_x_continuous(limits = c(0,100), breaks = scales::pretty_breaks(10))+
ggtitle("R5 survey duration")
ggplot(data = sn) +
geom_histogram(aes(x = interviewDuration))+
theme_light()+
labs(x = "Minutes")+
scale_x_continuous(limits = c(0,100), breaks = scales::pretty_breaks(10))+
ggtitle("R5 survey duration (day 1)")
ggplot(data = sn) +
geom_histogram(aes(x = interviewDuration))+
theme_light()+
labs(x = "Minutes")+
scale_x_continuous(limits = c(0,100), breaks = scales::pretty_breaks(15))+
ggtitle("R5 survey duration (day 1)")
## targets using the bens listing file
target <- readxl::read_excel("R5 bens lookup file_updated.xlsx")%>%
group_by(Member_id, District_Name,Community_Name)%>%
summarise(Target = n())
library(tidyverse)
library(splitstackshape)
library(shinydashboard)
library(DT)
library(shinyWidgets)
library(future)
## targets using the bens listing file
target <- readxl::read_excel("R5 bens lookup file_updated.xlsx")%>%
group_by(Member_id, District_Name,Community_Name)%>%
summarise(Target = n())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
